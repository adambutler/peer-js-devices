class Device

  # A device can hold multiple DeviceConnection instances this is an array of
  # all DeviceConnection instances that have been setup for this Device.
  deviceConnections: []


  # The constructor is called when an instance of Device is created
  # is created it accepts the following parameters -
  #
  # @param id <String> - The device id will be generated by peer.js if null.
  #
  # @param host <String> - The hostname of the Peer Server.
  #
  # @param port <Integer> - The port number of the Peer Server. 
  constructor: (@id, @host = '127.0.0.1', @port = 9000) ->
    
    # If no id is provided then peer.js will generate  a random id  Since it
    # is the first argument this has been set as null.
    @id = null unless @id?

    # Generate a peer for the device
    @peer = new Peer(@id,
      host: @host
      port: @port
    )

    # Setup Events
    @setupEvents()

  # Setup events for the peer to be able to accept incoming connections from
  # other peers. 
  setupEvents: ->
    @peer.on "connection", (connection) =>
      deviceConnection = new DeviceConnection(@, connection)
      @deviceConnections.push(deviceConnection)

  # Create a new DeviceConnection, this method returns and instance of
  # DeviceConnection and will return it.
  #
  # @returns deviceConnection <DeviceConnection> - insance of DeviceConnection
  createDeviceConnection: ->
    deviceConnection = new DeviceConnection(@)
    @deviceConnections.push(deviceConnection)
    return deviceConnection

# Export this classes to exports or the window depending on environment.
root = exports ? this
root.Device = Device
